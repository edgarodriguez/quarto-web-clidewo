---
title: "PT test: Selecting color schemes for mapping ancestral states"
description:
  How to change the phytools default color scheme when visualizing the results of ancestral character state estimation
date: "2021-06-02"
date-modified: today
image: featured.png
execute:
  echo: true
  cache: false
  messages: false
  warning: false
citation:
  url: https://www.joelnitta.com/posts/2021-06-02_color-scheme-anc-states/
categories:
  - r
  - plotting
lang: pt
---



## About `contMap()`

The `phytools` package provides (among many other things) the [`contMap()`](https://rdrr.io/cran/phytools/man/contMap.html) function for estimating ancestral character states and [visualizing their changes along the branches of a phylogenetic tree](http://blog.phytools.org/search?q=contmap). It can either produce the plot directly (default), or be saved as an object with the `plot = FALSE` argument, to be further manipulated and plotted later with `plot()`.

## Default coloRES

I have to say I'm not a fan of the default color scheme, which is a rainbow palette going from red through yellow and green to blue. 

PORTUGUESE TEXT HERE....
For example, let's [borrow some example code](http://www.phytools.org/eqg2015/asr.html) and look at the default plot:


Although this does provide a wide range of colors, **it's not obvious why one color is greater or less than the others**. In particular it's hard to discern the order of intermediate values (yellow, green, light blue). Indeed, there has been much written on [why the rainbow palette is generally not a good way to visualize continuous data](https://www.nature.com/articles/s41467-020-19160-7).

## Defining a new color palette

[`phytools::setMap()`](https://rdrr.io/cran/phytools/man/setMap.html) can be used to specify another color palette. `setMap()` passes its second argument (a vector of color names or [hexadecimals](https://en.wikipedia.org/wiki/Web_colors)) to [`colorRampPalette()`](https://rdrr.io/r/grDevices/colorRamp.html). `colorRampPalette()` is a bit unusual in that it's a function that produces a function, in this case, one that generates a vector of colors interpolating between the original input values:


So, this works fine for generating custom color gradients. But [designing accurate, color-blind friendly color palettes is not a simple task](https://www.fabiocrameri.ch/visualisation/). Fortunately, there are several packages available with such carefully crafted palettes. Two of my favorite are [`viridis`](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html) and [`scico`](https://github.com/thomasp85/scico). **How can we use these with the plotting function in phytools?**

## Using `viridis` or `scico` palettes

Well, it turns out that as long as we specify the same number of colors, we can replicate the viridis color palette with `colorRampPalette()`. The only difference is the alpha, or transparency level, indicated at the [end of each hexidecimal with two letters](https://stackoverflow.com/questions/23201134/transparent-argb-hex-value) (here "FF"). There is no reason to use transparency here anyways, so that doesn't matter.

So here is the `viridis` version of the phytools plot:


And here is another one, this time using a palette from `scico`:


I personally find this one even easier to interpret than `viridis`. It's very clear which values are low and high.

## `ggtree`

Just for completeness, here is code to replicate the plot in  [`ggtree`](https://github.com/YuLab-SMU/ggtree).


That's it!

## Reproducibility {.appendix}

- [Source code](https://github.com/joelnitta/joelnitta-home/tree/main/posts/2021-06-02_color-scheme-anc-states/index.ja.qmd)
- [`renv` lockfile](https://github.com/joelnitta/joelnitta-home/tree/main/posts/2021-06-02_color-scheme-anc-states/renv.lock)
